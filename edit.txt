import React, { useState, useContext } from "react";
import { TextField, Button, Box, Typography } from "@mui/material";
import axios from "axios";
import { AuthenticationContext } from "../AuthenticationProvider"; // از کانتکست اصلی استفاده کنید
import { useNavigate } from "react-router-dom";

const LoginForm = () => {
  const [userName, setUserName] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const { updateUser } = useContext(AuthenticationContext); // مقدار `updateUser` را از کانتکست بگیرید

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!userName || !password) {
      setError("نام کاربری و کلمه عبور را وارد کنید");
      return;
    }

    setIsLoading(true);

    try {
      const response = await axios.post("/api/users/login", {
        userName,
        password,
      });

      updateUser(response.data); // ذخیره اطلاعات کاربر در Context
      localStorage.setItem("user", JSON.stringify(response.data)); // ذخیره در LocalStorage
      navigate("/");
    } catch (error) {
      setError(error.response?.data || "خطایی رخ داده است");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box
      sx={{
        maxWidth: 400,
        margin: "auto",
        mt: 10,
        mb: 10,
        p: 3,
        border: "1px solid #ddd",
        borderRadius: 2,
        boxShadow: 3,
        textAlign: "center",
      }}
    >
      <Typography variant="h5" gutterBottom>
        ورود
      </Typography>
      <form onSubmit={handleSubmit}>
        <TextField
          label="نام کاربری"
          fullWidth
          margin="normal"
          value={userName}
          onChange={(e) => setUserName(e.target.value)}
        />
        <TextField
          label="کلمه عبور"
          type="password"
          fullWidth
          margin="normal"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        {error && (
          <Typography color="error" variant="body2" sx={{ mt: 1 }}>
            {error}
          </Typography>
        )}
        <Button
          type="submit"
          variant="contained"
          color="primary"
          fullWidth
          sx={{ mt: 2 }}
          disabled={isLoading}
        >
          {isLoading ? "ورود..." : "ورود"}
        </Button>
      </form>
    </Box>
  );
};

export default LoginForm;